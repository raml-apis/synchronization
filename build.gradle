buildscript {
    repositories {

        maven {
            name = "mule"
            url = "https://repository-master.mulesoft.org/snapshots/"
        }
        mavenCentral()
    }
    dependencies {
        classpath 'org.raml:raml-parser:0.9-SNAPSHOT'
    }
}
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.HashSet;
import java.util.List;

import org.raml.model.Raml;
import org.raml.parser.loader.FileResourceLoader;
import org.raml.parser.loader.ResourceLoader;
import org.raml.parser.rule.NodeRuleFactory;
import org.raml.parser.rule.ValidationResult;
import org.raml.parser.tagresolver.TagResolver;
import org.raml.parser.visitor.RamlDocumentBuilder;
import org.raml.parser.visitor.RamlDocumentValidator;
import org.raml.parser.visitor.RamlValidationService;


import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.HashSet;

public class UnusedFiledDetector {

	private HashSet<File> included = new HashSet<File>();
	private HashSet<File> visited = new HashSet<File>();

	void processRaml(File fl) {
		try {
			BufferedReader rs = new BufferedReader(new FileReader(fl));
			while (true) {
				String readLine = rs.readLine();
				if (readLine == null) {
					break;
				}
				int indexOf = readLine.indexOf("!include");
				while (indexOf != -1){
					
						readLine = readLine.substring(
								indexOf + "!include".length()).trim();
						StringBuilder bld = new StringBuilder();
						for (int a = 0; a < readLine.length(); a++) {
							char c = readLine.charAt(a);
							if (Character.isWhitespace(c)) {
								readLine = readLine.substring(a);
								break;
							}
							bld.append(c);
						}
						String incl = bld.toString();
						if (incl.charAt(0) == '\"') {
							incl = incl.substring(1, incl.length() - 1);
						} else if (incl.charAt(0) == '\'') {
							incl = incl.substring(1, incl.length() - 1);
						}
						File e = new File(fl.getParentFile(), incl);
						if (!e.exists()) {
							System.out.println(e);
						}
						included.add(e);
						indexOf = readLine.indexOf("!include");
									
				};
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	void testAPIFolder(File folder, boolean isRoot) {
		for (File f : folder.listFiles()) {
			
			if (f.isDirectory()) {
				
				if (f.getName().equals("portal")){
					continue;
				}
				if (f.getName().equals("notebooks")){
					continue;
				}
				testAPIFolder(f, false);
			}
			if (!isRoot) {
				visited.add(f);
			}
			if (f.getName().endsWith(".raml")) {
				processRaml(f);
			}
			
		}
	}
	
	public void testAllApis(File rootFolder){
	
	
/*		File[] listFiles = rootFolder.listFiles();
		for (File f: listFiles){
			if (f.isDirectory()){
				testAPIFolder(f,true);
			}
		}
*/
		testAPIFolder(rootFolder,true);
		visited.removeAll(included);
		System.out.println("Totally have :"+visited.size()+" unreferenced files");
		ArrayList<File>str=new ArrayList<File>(visited);
		Collections.sort(str)
		for (File f:str){
			System.out.println(f);
		}
	}

}


public class RAMLProjectVisitor {

    static HashSet<String> dirToIgnore = new HashSet<String>();

    static {
        dirToIgnore.add("traits");
        dirToIgnore.add("resourceTypes");
        dirToIgnore.add("securitySchemes");
        dirToIgnore.add("portal");
        dirToIgnore.add("notebooks");
        dirToIgnore.add("docs");
        dirToIgnore.add("examples");
        dirToIgnore.add("schemas");
        dirToIgnore.add("synchronization");
    }
    boolean isValid=true;

    public void visit(File folder) {
        File[] listFiles = folder.listFiles();
        for (File f : listFiles) {
            String name = f.getName();
            if (name.endsWith(".raml")) {
                validateRAML(f);
            }
            if (f.isDirectory()) {
                if (!dirToIgnore.contains(f.getName())) {
                    visit(f);
                }
            }
        }
    }

    private void validateRAML(File f) {
		
        ResourceLoader fileResourceLoader = new ResourceLoader(){
            @Override
            public InputStream fetchResource(String resourceName)
            {

                File includedFile = new File(f.getParentFile(), resourceName);
                FileInputStream inputStream = null;
                try
                {
                    return new FileInputStream(includedFile);
                }
                catch (FileNotFoundException e)
                {
					try
					{
						return new FileInputStream(resourceName);
					}
					catch (FileNotFoundException ex)
					{
					
					}
                    //ignore
                }
                return inputStream;
            }
        };
        RamlValidationService createDefault = createDefault(fileResourceLoader,
                new NodeRuleFactory());
        try {
            BufferedReader createReader = createFileReader(f);
            List<ValidationResult> validate = createDefault.validate(
                    createReader, f.getAbsolutePath());
            // doing basic validation first
            boolean canStartMoreAdvancedValidation = true;
            for (ValidationResult q : validate) {
                if (!q.isValid()) {
                    report(f,q);
                    canStartMoreAdvancedValidation = false;
                }
            }
            if (!canStartMoreAdvancedValidation) {
                return;
            }
            createReader.close();
            RamlDocumentBuilder ramlDocumentBuilder = new RamlDocumentBuilder(
                    fileResourceLoader);
            createReader = createFileReader(f);
            Raml build = ramlDocumentBuilder.build(createReader,
                    f.getAbsolutePath());

            createReader.close();
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException("Should never happen");
        } catch (FileNotFoundException e) {
            throw new IllegalStateException("Should never happen", e);
        } catch (IOException e) {
            throw new IllegalStateException("IO Exception inside", e);
        }
    }

    private BufferedReader createFileReader(File f)
            throws UnsupportedEncodingException, FileNotFoundException {
        return new BufferedReader(new InputStreamReader(new FileInputStream(f),
                "UTF-8"));
    }

    private void report(File fl,ValidationResult q) {
        isValid=false;
        System.err.println(fl.getAbsolutePath()+" - "+q.getMessage() + ":" + q.getIncludeName()
                + " line: " + q.getLine());
    }

    public static RamlValidationService createDefault(ResourceLoader loader,
                                                      NodeRuleFactory nodeRuleFactory, TagResolver... tagResolvers) {
        return new RamlValidationService(loader, new RamlDocumentValidator(
                nodeRuleFactory), tagResolvers);
    }
}
//throw new IllegalStateException("error");

task testValidate {
	
	String userDir = System.getProperty("user.dir");
    File rootDir = new File(userDir);

	new UnusedFiledDetector().testAllApis(rootDir);
    def visitor = new RAMLProjectVisitor()
    visitor.visit(projectDir);
	
    if (!visitor.isValid){
        throw new IllegalStateException("Build failed");
    }
	
}